str.defaultEM = 13 // initial UI scale, in pixels of font size
tmpScale = 1
chat {
  
  loadImgs = safe // none - display no images inline; safe - load only mxc:// images; all - load all images 
  notifyOnEdit = false // whether to increase unread count on an edit
  timeSinceLast = true // whether to show time since last message in the log
  timeBetween = true // whether to show time between adjacent messages in the log
  logDate = false // whether to show the start of each date in the log
  mergeMessages = true // whether to visually merge consecutive messages by the same user (posted within 5 minutes of each other)
  markdown = true // whether to parse your messages as markdown
  internalImageViewer = true // whether to use the internal image viewer when clicking images (or some links); you can always right click â†’ "Open externally"
  internalPasteViewer = true // whether to use the internal dzaima.github.io/paste viewer for simple cases
  userAutocomplete = true // whether to show autocompletion options for usernames
  
  keys {
    editUp = { "up" }
    editDn = { "down" }
    replyUp = { "alt+up" }
    replyDn = { "alt+down" }
    roomUp = { "ctrl+up" }
    roomDn = { "ctrl+down" }
    hideCurrent = { "alt+h" } // hide unread count for the current room
    hideGlobal  = { "ctrl+alt+h" } // globally hide unread count
    deleteMsg = { "ctrl+alt+shift+del" }
    fontPlus = { "ctrl+shift+=" "ctrl+plus" }
    fontMinus = { "ctrl+minus" }
    pasteCode = { "ctrl+shift+v" } // paste clipboard, escaping things
    cancel = { "esc" }
  }
  menuKeys {
    copyLink = { "l" }
    copyText = { "c" }
    openExternal = { "o" }
    editHistory = { "h" }
    reply = { "r" }
    edit = { "e" }
    viewSource = { "s" }
    viewProfile = { "v" }
    folder = { "f" }
    delete = { "delete" }
    rename = { "r" }
  }
  autocomplete.keys {
    prev = { "up" }
    next = { "down" }
    // once either of those is activated and the menu focused, regular menu keys will work (incl. menu.keys.accept for accepting an entry)
    acceptOnly = { "tab" } // complete without selecting anything when there's only one user left
  }
  
  inputWidth = 10em:50em // width of the input field
  // syntax preview in message box
  preview.enabled = true
  preview.defFamily = str.defaultFont
  preview.escape = #779 // color of escape characters
  preview.codeBg = #63000000 // weird colors & alpha because this will be drawn over the selection tinting, but we want that to be at least somewhat visible
  preview.spoilerBg = #20A9D0E0
  preview.quoteLeadBg = #4999 // background color of leading ">"
  preview.quoteLeadCol = str.color // text color of leading ">"
  preview.quoteCol = chat.quote.color // quote text color
  preview.codeFamily = chat.code.family
  
  link.col = #A7DBC6 // #7cacff - a blue alternative
  // link.underline = false // TODO implement
  
  msg.userWidth = 10em // width for user tags to the left of a message
  msg.sep = 0.3em // separation between messages
  msg.my = #333333 // my message bg
  msg.other = #505C63 // other message bg 
  msg.sel = #3E3E3E // bg for replies to hovered message
  msg.edit = #444444 // currently edited message bg
  msg.reply = #555565 // currently replying to bg
  msg.highlight = #9D7650 // temporary highlight bg
  msg.noticeBg = #0000 // notice message (user joining/leaving etc)
  msg.noticeCol = #BBB // notice message (user joining/leaving etc)
  msg.removedCol = #5FFF // color of the "(removed)" text of removed messages
  msg.border = #888 // dashed border color
  quote.line  = #999 // color of line left of a quote
  quote.color = #999 // text color in quote
  image.maxW = 40em // maximum size of inline images (whichever is hit first will limit the scale)
  image.maxH = 20em
  image.minW = 4em // and minimum size (touch area will always be at least this big, and the image will be as big as it can within it and/or the max size)
  image.minH = 1.2em
  
  userCols.myNick = #D2D2D2
  userCols.myPill = chat.userCols.myNick
  userCols.otherNicks = { "#54A7F0" "#EA6EE6" "#24D7A4" "#F28C8F" "#FF9047" "#3FBDBF" "#A1D37A" } // can be set to just a single color if not wanted
  userCols.otherPills = chat.userCols.otherNicks // can be a separate list, or just a single color
  pill.padL = 0em
  pill.padR = 0em
  pill.padLMine = .05em
  pill.padRMine = .15em
  pill.bg = #0000
  pill.bgMine = #A3692F
  pill.round = 0.2em
  
  code.family = "BQN386 Unicode" // font used in chat messages
  code.familyUI = "DejaVu Sans Mono" // font used in UI for monospace
  code.bgInline = #222
  code.bgBlock = #222
  
  reaction.family = {
    "Inter" "Open Sans Condensed" "Arial" "Helvetica" "Liberation Sans" // various non-emoji fonts for text
    "Noto Color Emoji" "Noto Sans Symbols" "Noto Sans Symbols2" "Twemoji" "Apple Color Emoji" "Segoe UI Emoji" // and emoji fonts for the emoji
  }
  reaction.col = #999
  reaction.size = 0.8em
  receipt.family = str.defaultFont
  receipt.size = 0.8em
  receipt.col = #aaa
  receipt.list = menu { }
  
  spoiler.xpad = .2em // padding around content inside a spoiler
  spoiler.bg = #464B4D
  
  room.listBg = #26272A
  room.selected = #373C44
  room.hovered = #2D3237
  room.colServer = #777 // color of the server indicator in user list
  
  folder.endH = 0.2em // height of the closing segment of a folder
  folder.colors = { "#484848" "#585858" }
  folder.indentW = 0.2em // width of each folder indicating line
  folder.nameCol = #AAA
  folder.defaultName = "Unnamed folder"
  
  // layouts
  ly.bgRoomTitle = #191A1A
  ly.bgTranscript = #383838
  ly.bgInputBar = #222
  ly.bgInput = #383838
  
  ly.colActions = #888 // typing list, hovered message date/time
  ly.colInfo = #AAA // active action, link, etc
  ly.bgUploadField = #383838
  
  ly.colInfoText = #999
  ly.colInfoTitle = #AAA
  
  ly.bgUnread = #7666
  ly.bgHidden = #BBB
  
  ly.iconEdit = #999
  ly.iconReply = #AAA
  
  // main
  ui = weighed { dir=h
    weight=.16
    scroll { x=off y=hidden tempOverlap=true // room list
      w=10em
      bg=chat.room.listBg
      v {
        id=accounts
        pad=.9em
        // rooms.accountP / rooms.accountSepP
      }
    }
    weighed { dir=h weight=1 id=panelWeight enabled=false
      v { // message list
        h { h=2.5em
          pad { l=1.5em r=.35em
            h {
              h { weight=99 alY=center text { tsz=1.2em "" id=roomName } }
              h { alX=right alY=center
//                btn { padX=.4em padY=.35em bgOff=#333 bgHover=#383838 bgOn=#404040 radius=.6em w=max id=roomInfo "info" }
              }
            }
          }
          bg=chat.ly.bgRoomTitle
        }
        scroll { x=off id=msgsScroll
          bg=chat.ly.bgTranscript
          h {
            pad { x=.3em u=5em d=.3em
              v { h=min id=msgs
                // actual message list
              }
            }
            h { w=0em:5em weight=.05 }
          }
        }
        pad { all=.5em l=2em bg=chat.ly.bgInputBar
          h { h=min pad=.5em
            scroll { h=6.2em w=chat.inputWidth bg=chat.ly.bgInput x=off
              pad { all=.3em id=inputPlace "" }
            }
            v { pad=.2em weight=.2 w=10em:99em // todo figure out why this breaks with weight=.1
              h { h=min pad=.5em
                btn { style=rect id=send "send" padX=.5em padY=.3em }
                btn { style=rect id=upload "upload" padX=.5em padY=.3em }
              }
              v {
                hideOverflow { alX=left
                  text { id=actionbar "" color=chat.ly.colActions } // typing list, hovered message date/time
                }
                h { h=max alY=bottom alX=right
                  hideOverflow { alX=right h=min
                    text { id=infobar "" color=chat.ly.colInfo } // active action, link, etc
                  }
                }
              }
            }
          }
        }
      }
      v { id=rightPanelPlace }
    }
  }
  
  // right panel in general
  rightPanel {
    weight = 0.3 // initial width fraction
    ui = v { bg = #282828
      pad { all=.4em
        h { h=min
          h { alX=left id=backBtnPlace }
          h { alX=right btn { padX=.5em padY=.5em bgOff=#444 bgHover=#484848 radius=.6em w=max chat.icon.$close{} id=closeBtn } }
        }
      }
      scroll { id=content x=off tempOverlap=true } // TODO move scroll to the specific panel users that want it
    }
    backBtn = btn { padX=.4em padY=.35em bgOff=#444 bgHover=#484848 radius=.6em w=max id=btn
      text { ta { mode=above chat.icon.$back{} } text { id=text } }
    }
    keys {
      close = chat.keys.cancel
      back = { }
    }
  }
  
  // user profile viewing
  profile {
    menu = menu {
      mi { id=view "View profile" key=chat.menuKeys.viewProfile }
      mi { id=copyID "Copy ID" key=chat.menuKeys.copyText }
      mi { id=copyLink "Copy link" key=chat.menuKeys.copyLink }
    }
    $title = text { tsz=1.05em $t }
    $link = clickableText { hover=true color=chat.link.col id=$id $t }
    ui = pad { x=0.5em
      v { pad=.5em
        h { h=min alX=center text { tsz=1.05em id=name } }
        h { h=min alX=center text { tsz=1.05em id=server color=chat.room.colServer family=chat.code.familyUI } }
        h { h=min alX=center id=image }
        vsep { y=.2em }
        chat.profile.$title { t="General" }
        chat.profile.$link { id=toReadReceipt $t="  Jump to read receipt" }
        chat.profile.$link { id=mention $t="  Mention" }
        id = more
      }
    }
    adminUI = v { pad=.5em h=min
      vsep { y=.2em }
      chat.profile.$title { t="Admin" }
    }
    kickUI         = chat.profile.$link { id=run t="  Kick" }
    removeRecentUI = chat.profile.$link { id=run t="  Remove recent messages" }
    banUI          = chat.profile.$link { id=run t=text { "  " text { id=text "" } } }
//    advancedBanUI  = chat.profile.$link { id=run "  Advanced ban" }
    banMsg="Ban" unbanMsg="Unban"
    
    $btn = btn { id=$id style=rect padX=.5em padY=.3em $t }
    $btns = h { alX=right chat.profile.$btn { t="cancel" id=cancel } chat.profile.$btn { id=run t=$run } pad=1em }
    
    confirmUI = pad { bg=bg.middle all=1.2em
      v { h=min w=50em pad=1em
        text { text { id=msg } " \"" text { id=username } "\" from the room \"" text { id=room } "\"?" }
        h { id=reasonPlace }
        chat.profile.$btns { run={} }
      }
    }
    reasonField = h { alY=center text { "reason: " } chat.$sField { bg=chat.ly.bgUploadField id=reason } }
    removeRecentConfirmUI = pad { bg=bg.middle all=1.2em
      v { h=min w=50em pad=1em
        text { "Remove recent messages from \"" text { id=username } "\" within the room \"" text { id=room } "\"?" }
        text { "This will remove " text { "n" id=num } " messages." }
        chat.profile.$btns { run="remove" }
      }
    }
    
    minW=10em maxW=20em // profile avatar image size
    minH=10em maxH=20em
  }
  
  // user list
  userList {
    ui = vl { id=list }
    avatarSz = 2em
    entry = btn { style=box w=inherit bgHover=#303030 bgOn=#383838 id=btn
      h { alY=center pad=.5em
        h { id=image w=chat.userList.avatarSz h=chat.userList.avatarSz }
        text { id=name }
      }
    }
  }
  
  // messages
  msg.mainP = pad { u=.3em id=padU
    h { h=min pad=.5em
      pad { u=.2em // assumes .1em+1px == .2em, which isn't true but eh
        hideOverflow { alX=right w=10em id=user "" }
      }
      msgBorder { id=border bg=#00FF00
        pad { y=.1em
          h { id=body
            h { w=1.5em alX=center h=min id=edit }
            ""
          }
        }
      }
    }
  }
  mx.msgMenu {
    main = menu { }
    message = {
      // mi { id=viewHistory "View edit history" }
      mi { id=replyTo "Reply to" key=chat.menuKeys.reply }
      mi { id=copyLink "Copy message link" key=chat.menuKeys.copyLink }
    }
    text = { mi { id=copyText "Copy message text" key=chat.menuKeys.copyText } }
    code = { mi { id=copyCode "Copy code block" key=chat.menuKeys.copyText } }
    viewEdits = { mi { id=viewEdits "View edit history" key=chat.menuKeys.editHistory } }
    sep = vsep{}
    mine = {
      mi { id=edit "Edit" key=chat.menuKeys.edit }
      mi { id=delete "Delete" key=chat.keys.deleteMsg }
      vsep{}
    }
    dev = {
      mi { id=viewSource "View source" key=chat.menuKeys.viewSource }
    }
  }
  mx.roomMenu {
    $links = {
      mi { id=copyLink "Copy link" key=chat.menuKeys.copyLink }
      mi { id=copyID "Copy room ID" key=chat.menuKeys.copyText }
    }
    main = menu {
      chat.mx.roomMenu.$links{}
      vsep{}
      mi { id=wrap "Make new folder" key=chat.menuKeys.folder }
    }
  }
  folderMenu {
    main = menu {
      mi { id=wrap "Make new folder" key=chat.menuKeys.folder }
    }
    local = {
      mi { id=rename "Rename folder" key=chat.menuKeys.rename }
      mi { id=delete "Delete folder" key=chat.menuKeys.delete }
    }
    mxSpace = {
      mi { id=rename "Rename locally" key=chat.menuKeys.rename }
      vsep{}
      chat.mx.roomMenu.$links{}
      mi { id=viewInternal "View internal Matrix room" }
    }
  }
  linkMenu = menu {
    mi { id=copy "Copy link address" key=chat.menuKeys.copyLink }
    mi { id=openExt "Open externally" key=chat.menuKeys.openExternal }
  }
  textUI = h { bg=bg.middle // used for paste & text files
    scroll {
      codearea { id=src
        family=chat.code.familyUI
        padLns=20
        padChrs=60
      }
    }
  }
  sourceUI = chat.textUI
  mxUpload = pad { bg=bg.middle all=1em
    v { pad=.4em w=30em h=7em
      h { pad=.4em btn { "Choose File" style=rect id=choose }
                                chat.$sField { bg=chat.ly.bgUploadField id=path } }
      h { pad=.4em "File name:" chat.$sField { bg=chat.ly.bgUploadField id=name } }
      h { pad=.4em "MIME type:" chat.$sField { bg=chat.ly.bgUploadField id=mime } }
      pad { u=1em
        h { alX=right pad=0.4em
          btn { "Get link" style=rect id=getLink }
          btn { "Send as image" style=rect id=sendMessage }
        }
      }
    }
  }
  userAutocompleteUI = menu { }
  
  info.mainP = pad { u=.3em infoType="idk"
    h { h=min pad=.5em
      h { w=10em h=.3em }
      pad { y=.3em l=1.5em id=body }
    }
  }
  info.$textP = text { $body color=chat.ly.colInfoText } // e.g. "X time later...", "Last message was posted X ago"
  info.$titleP = h { alX=center text { $body color=chat.ly.colInfoTitle } } // e.g. inline message date
  
  // message contents
  code.inlineP = text { family=chat.code.family bg=chat.code.bgInline xpad=.2em class=inlineCode }
  code.$blockP = pad { r=.6em y=.3em
    pad { all=.2em bg=chat.code.bgBlock
      stext { family=chat.code.family $body ibeam=true class=blockCode }
    }
  }
  msg.noticeP = text { id=ch italics=true color=chat.msg.noticeCol } // X joined/left/etc
  msg.removedP = text { "(removed)" color=chat.msg.removedCol }
  msg.imageLoadingP = text { "(image loadingâ€¦)" }
  notice {
    $defaultEvent = text { $executer " did " $type }
    $defaultMember = text { $executer " did " $type " on " $user }
    $join = text { $user " joined" }
    
    $and = text { " and" }
    $setName = text { " changed their display name to " $new }
    $noName = text { " unset their username" }
    $newAvatar = text { " changed their avatar" }
    $noopMember = text { " did m.room.member" }
    $requestAccess = text { $user " requested access to this room" }
    
    $invite = text { $executer " invited "  $user }
    $ban    = text { $executer " banned "   $user }
    $kick   = text { $executer " kicked "   $user }
    $unban  = text { $executer " unbanned " $user }
    $left = text { $user " left" }
    
    $createRoom = text { $executer " created this room" }
    $canonicalAlias = text { $executer " set the canonical alias" }
    $powerLevels = text { $executer " changed power levels" }
    $joinRules = text { $executer " set join rules to " $rule }
    $historyVis = text { $executer " set history visibility to " $vis }
    $roomName = text { $executer " set room name to " $name }
    $guestAccess = text { $executer " set guest access to " $val }
    // $ = text { $executer }
  }
  
  // general UI
  rooms.accountP = v { h=min
    pad { all=.5em x=.5em
      h {
        text { tsz=1.05em text { id=name "(loading)" } " " text { id=server color=chat.room.colServer family=chat.code.familyUI "??" } }
      }
    }
    roomList { dir=v mode=drag id=roomlist
      h { alX=center text{ italics=true color=str.colorDisabled "loading..." } } // replaced with â€¦rooms.roomP when loaded
    }
  }
  rooms.accountSepP = vsep { x=.5em }
  rooms.roomP = pad { bg=#0000 id=bg
    all=.4em x=0.7em
    h { id=entryPlace
      text {
        text { id=name "â€¦" }
        text { id=unread }
      }
    }
  }
  rooms.folderName = text { color=chat.folder.nameCol id=name "â€¦" }
  rooms.folderEnd = v { bg=#0000 id=bg h=chat.folder.endH }
  rooms.folderRename.field = scroll { y=off x=hidden nameEditField { family=str.defaultFont bg=#0000 id=val color=chat.folder.nameCol } }
  rooms.folderRename.keys { cancel = chat.keys.cancel }
  
  rooms.unreadP = text { " " text { bg=chat.ly.bgUnread id=num } }
  rooms.unreadHiddenP = text { color=chat.ly.bgHidden " (h)" }
  
  $sField = scroll { y=off x=hidden textfield { family=str.defaultFont bg=$bg id=$id } }
  
  // icons
  icon.$back = svgicon { iw=11 ih=8 h=0.6em src="M5.5 0l1 1-3 3 3 3-1 1-4-4Z" }
  icon.$close = svgicon { iw=8 ih=8 h=0.6em src="M7 0 8 1 5 4 8 7 7 8 4 5 1 8 0 7 3 4 0 1 1 0 4 3Z" }
  // https://github.com/Templarian/MaterialDesign/blob/master/LICENSE https://www.apache.org/licenses/LICENSE-2.0
  icon.editedP = pad { u=.1em svgicon { iw=24 ih=24 w=0.85em color=chat.ly.iconEdit src="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" } }
  icon.replyP = svgicon { iw=24 ih=24 w=0.8em color=chat.ly.iconReply src="M11 17v-5h5v8h5V7H11V2l-7 7.5z" }
}


imageViewer {
  zoomStrength = 1.003 // factor by which to zoom per pixel of scrolling
  timelineDone = #4000ff00
  timelineLeft = #40000000
  keys {
    exit = menu.genericExit
    playPause = { "space" }
    nextFrame = { "right" }
    prevFrame = { "left" }
    toStart = { "ctrl+left" }
    pixelFit = { "ctrl+0" }
  }
  ui = h { bg=bg.middle
    imageViewer { id=viewer }
  }
}


btn.rect {
  bg = #4F4F50
  borderL = #333
  borderD = #000
}

codearea {
  wrapPairs = "()[]{}``"
}